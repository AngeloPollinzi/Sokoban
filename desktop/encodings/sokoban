step(0..15).
maxmosse(15).

%configurazione iniziale.
target(X,Y):- cell(X,Y,4).
playerposition(0,1,1).
boxposition(0,Id,X,Y):-box(Id,X,Y).

%le celle dove posso spostarmi.
validposition(X,Y):- cell(X,Y,0).
validposition(X,Y):- cell(X,Y,1).
validposition(X,Y):- cell(X,Y,3).
validposition(X,Y):- cell(X,Y,4).

%genero le adiacenze rispetto alle posizioni valide.
adj(X,Y,X,Y+1):-validposition(X,Y),validposition(X,Y+1).
adj(X,Y,X,Y-1):-validposition(X,Y),validposition(X,Y-1).
adj(X,Y,X+1,Y):-validposition(X,Y),validposition(X+1,Y).
adj(X,Y,X-1,Y):-validposition(X,Y),validposition(X-1,Y).

%decido se spostare un box o meno in una certa direzione se ci sono ancora mosse disponibili.
move(S,Id,"up")|not_move(S,Id,"up"):-boxposition(S,Id,X,Y),maxmosse(M),goodpushlocation(X,Y+1),not occupied(S,X,Y+1),reachable(S,X,Y-1),S<M.
move(S,Id,"down")|not_move(S,Id,"down"):-boxposition(S,Id,X,Y),maxmosse(M),goodpushlocation(X,Y-1),not occupied(S,X,Y-1),reachable(S,X,Y+1),S<M.
move(S,Id,"right")|not_move(S,Id,"right"):-boxposition(S,Id,X,Y),maxmosse(M),goodpushlocation(X+1,Y),not occupied(S,X+1,Y),reachable(S,X-1,Y),S<M.
move(S,Id,"left")|not_move(S,Id,"left"):-boxposition(S,Id,X,Y),maxmosse(M),goodpushlocation(X-1,Y),not occupied(S,X-1,Y),reachable(S,X+1,Y),S<M.

%non posso spostare piu' di un box nello stesso step.
:- move(S,Id1,_),move(S,Id2,_),Id1!=Id2.
%non posso spostare un box in due direzioni diverse nello stesso istante.
:- move(S,Id,D1),move(S,Id,D2),D1!=D2.
%evito un doppio spostamento poco sensato(ottimizzazione). 
:- move(S,Id,"up"),move(S+1,Id,"down").
:- move(S,Id,"right"),move(S+1,Id,"left").

%in base alla direzione scelta cambio la posizione del player,considerando che dove prima c'era il box 
%ora c'e' il player e che abbia spostato effettivamente qualcosa.
playerposition(S+1,X,Y):- move(S,Id,_),boxposition(S,Id,X,Y).

%trovo gli step in cui c'e' qualcosa da spostare.
somethingtomove(S) :- move(S,_,_).

%le posizioni occupate da un box.
occupied(S,X,Y) :- boxposition(S,_,X,Y).

%caso in cui ad uno step un box non venga mosso.
boxposition(S+1,Id,X,Y) :- boxposition(S,Id,X,Y), not_move(S,Id,_),maxmosse(M),S<M.
playerposition(S+1,X,Y) :- not somethingtomove(S),maxmosse(M),playerposition(S,X,Y),S<M.

%tutti i vari spostamenti di un box che posso fare in ogni istante.
boxposition(S+1,Id,X,Y+1):- move(S,Id,"up"),boxposition(S,Id,X,Y).
boxposition(S+1,Id,X,Y-1):- move(S,Id,"down"),boxposition(S,Id,X,Y).
boxposition(S+1,Id,X+1,Y):- move(S,Id,"right"),boxposition(S,Id,X,Y).
boxposition(S+1,Id,X-1,Y):- move(S,Id,"left"),boxposition(S,Id,X,Y).

%al termine non puo' esistere un box che non sia su un target. 
reached(Id) :- maxmosse(M), boxposition(M,Id,X,Y),target(X,Y).
:-boxposition(_,Id,_,_),not reached(Id).

%identifica la raggiungibilita' di un punto da parte del player ad ogni step.
reachable(S,X,Y) :- playerposition(S,X,Y),step(S).
reachable(S,X,Y) :- reachable(S,X1,Y1),adj(X1,Y1,X,Y),not occupied(S,X,Y).

%mi trovo tutti i punti diversi da un dead point, ossia quei punti che hanno una posizione valida a destra e sinistra 
%oppure sopra o sotto.
goodpushlocation(X,Y) :- validposition(X+1,Y),validposition(X,Y),validposition(X-1,Y),not occupied(X,Y).
goodpushlocation(X,Y) :- validposition(X,Y-1),validposition(X,Y),validposition(X,Y+1),not occupied(X,Y).

