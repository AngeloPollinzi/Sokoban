step(0).
step(S+1):-step(S),maxmosse(M),S<M.
next(S,S1):-step(S),step(S1),S1=S+1.
actionstep(S) :- next(S,S1).
notfinalstep(S) :- next(S,S1).
finalstep(S) :- step(S), not notfinalstep(S).
initialstep(S) :- step(S), not notinitialstep(S).
notinitialstep(S) :- next(S1,S).

left(X1,Y1,X2,Y2) :- right(X2,Y2,X1,Y1).
bottom(X1,Y1,X2,Y2) :- top(X2,Y2,X1,Y1).

adj(X1,Y1,X2,Y2) :- right(X1,Y1,X2,Y2).
adj(X1,Y1,X2,Y2) :- left(X1,Y1,X2,Y2).
adj(X1,Y1,X2,Y2) :- top(X1,Y1,X2,Y2).
adj(X1,Y1,X2,Y2) :- bottom(X1,Y1,X2,Y2).

target(X,Y):-cell(X,Y,4).

%Posizioni iniziali...
boxposition(S,X,Y) :- box(_,X,Y), initialstep(S).
playerposition(S,X,Y) :- cell(X,Y,1), initialstep(S).

%allo step S muovo un box in posizione (X1,Y1) in una certa direzione fino alla posizione (X2,Y2)...
move(S,right,X1,Y1,X2,Y2) | notmove(S,right,X1,Y1,X2,Y2) :- reachable(S,X,Y), right(X,Y,X1,Y1), boxposition(S,X1,Y1), canmoveright(S,X1,Y1,X2,Y2), notdeadpoint(X2,Y2), actionstep(S).
move(S,up,X1,Y1,X2,Y2) | notmove(S,up,X1,Y1,X2,Y2) :- reachable(S,X,Y), top(X,Y,X1,Y1),boxposition(S,X1,Y1), canmovetop(S,X1,Y1,X2,Y2), notdeadpoint(X2,Y2), actionstep(S).
move(S,down,X1,Y1,X2,Y2) | notmove(S,down,X1,Y1,X2,Y2) :- reachable(S,X,Y), bottom(X,Y,X1,Y1), boxposition(S,X1,Y1), canmovebottom(S,X1,Y1,X2,Y2), notdeadpoint(X2,Y2), actionstep(S).
move(S,left,X1,Y1,X2,Y2) | notmove(S,left,X1,Y1,X2,Y2) :- reachable(S,X,Y), left(X,Y,X1,Y1), boxposition(S,X1,Y1), canmoveleft(S,X1,Y1,X2,Y2), notdeadpoint(X2,Y2), actionstep(S).

%non posso spingere due box differenti allo stesso step
:- move(S,_,X,Y1,_,_),move(S,_,X,Y2,_,_), Y1!=Y2.
:- move(S,_,X1,Y,_,_),move(S,_,X2,Y,_,_), X1!=X2.
:- move(S,_,X1,Y1,_,_),move(S,_,X2,Y2,_,_), X1!=X2,Y1!=Y2.
%non posso spostare un box in due direzioni deifferenti allo stesso step.
:- move(S,D1,X,Y,_,_), move(S,D2,X,Y,_,_), D1!=D2.
%non posso spostare un box in destinazioni differenti allo stesso step
:- move(S,D,X,Y,X,Y1), move(S,D,X,Y,X,Y2), Y1!=Y2.
:- move(S,D,X,Y,X1,Y), move(S,D,X,Y,X2,Y), X1!=X2.

%predicato che mi indica se allo step S posso spostarmi in una certa direzione di un certo numero di caselle.
canmoveright(S,X1,Y1,X2,Y2) :- boxposition(S,X1,Y1), right(X1,Y1,X2,Y2), not boxposition(S,X2,Y2), actionstep(S).
canmoveright(S,X1,Y1,X2,Y2) :- canmoveright(S,X1,Y1,X,Y), right(X,Y,X2,Y2), not boxposition(S,X2,Y2).
canmoveleft(S,X1,Y1,X2,Y2) :- boxposition(S,X1,Y1), left(X1,Y1,X2,Y2), not boxposition(S,X2,Y2), actionstep(S).
canmoveleft(S,X1,Y1,X2,Y2) :- canmoveleft(S,X1,Y1,X,Y), left(X,Y,X2,Y2), not boxposition(S,X2,Y2).
canmovetop(S,X1,Y1,X2,Y2) :- boxposition(S,X1,Y1), top(X1,Y1,X2,Y2), not boxposition(S,X2,Y2), actionstep(S).
canmovetop(S,X1,Y1,X2,Y2) :- canmovetop(S,X1,Y1,X,Y), top(X,Y,X2,Y2), not boxposition(S,X2,Y2).
canmovebottom(S,X1,Y1,X2,Y2) :- boxposition(S,X1,Y1), bottom(X1,Y1,X2,Y2), not boxposition(S,X2,Y2), actionstep(S).
canmovebottom(S,X1,Y1,X2,Y2) :- canmovebottom(S,X1,Y1,X,Y), bottom(X,Y,X2,Y2), not boxposition(S,X2,Y2).

%tutte le posizioni raggiungibili dal player allo step S
reachable(S,X,Y) :- playerposition(S,X,Y).
reachable(S,X,Y) :- reachable(S,X1,Y1), adj(X1,Y1,X,Y), not boxposition(S,X,Y).

%se sposto un box il player allo step successivo si trovera' nella casella adiacente al box in termini di spostamento.
playerposition(S1,X1,Y1) :- move(S,right,_,_,X2,Y2), next(S,S1), right(X1,Y1,X2,Y2).
playerposition(S1,X1,Y1) :- move(S,left,_,_,X2,Y2), next(S,S1), left(X1,Y1,X2,Y2).
playerposition(S1,X1,Y1) :-move(S,up,_,_,X2,Y2), next(S,S1), top(X1,Y1,X2,Y2).
playerposition(S1,X1,Y1) :- move(S,down,_,_,X2,Y2), next(S,S1), bottom(X1,Y1,X2,Y2).
notplayerposition(S1,X,Y) :- move(S,_,X1,Y1,X2,Y2), next(S,S1), playerposition(S,X,Y),X1=X2,Y1!=Y2.
notplayerposition(S1,X,Y) :- move(S,_,X1,Y1,X2,Y2), next(S,S1), playerposition(S,X,Y),X1!=X2,Y1=Y2.

%spostamenti del box causati dal un movimento.
boxposition(S1,X,Y) :- move(S,_,_,_,X,Y), next(S,S1).
notboxposition(S1,X1,Y1) :- move(S,_,X1,Y1,X2,Y2), next(S,S1),X1=X2,Y1!=Y2.
notboxposition(S1,X1,Y1) :- move(S,_,X1,Y1,X2,Y2), next(S,S1), X1!=X2,Y1=Y2.

%posso spostare un box alla volta,dunque quando sposto un box tutti gli altri saranno fermi.
boxposition(S1,X,Y) :- boxposition(S,X,Y), next(S,S1), not notboxposition(S1,X,Y).
playerposition(S,X,Y) :- playerposition(S,X,Y), next(S,S1), not notplayerposition(S1,X,Y).

%predicato che contiene tutti i punti dai quali posso tirar fuori il mio box senza che resti bloccato.
%sono sia i target,sia i punti che hanno una cella valida a destra e a sinistra oppure sopra e sotto
notdeadpoint(X,Y) :- right(X,Y,_,_), left(X,Y,_,_).
notdeadpoint(X,Y) :- top(X,Y,_,_), bottom(X,Y,_,_).
notdeadpoint(X,Y) :- target(X,Y).

%non posso avere sequenze di spostamenti in cui viene saltato uno step.
somethingmoved(S) :- move(S,_,_,_,_,_).
missingmovement(S):- actionstep(S), not somethingmoved(S).
:- missingmovement(S).

notsolutionstep(S) :- target(X,Y), step(S), not boxposition(S,X,Y).
solutionnotfound(S) :- notsolutionstep(S), finalstep(S).
:- solutionnotfound(S).

:~playerposition(_,_,_). [1@1]
